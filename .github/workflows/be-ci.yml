# 워크플로우의 이름을 정의합니다. 이 이름은 GitHub Actions 탭에서 표시됩니다.
name: be server pull request

# 워크플로우 실행의 트리거 조건을 정의합니다.
on:
  # 'main' 브랜치 또는 'be-server-cicd' 브랜치에 pull request 이벤트가 발생할 때 워크플로우를 실행합니다.
  pull_request:
    branches:
      - main

  # 워크플로우를 수동으로 실행할 수 있는 옵션을 제공합니다.
  # GitHub 웹 인터페이스에서 "Run workflow" 버튼을 통해 실행할 수 있습니다.
  workflow_dispatch:

permissions:
  checks: write
  pull-requests: write

# 워크플로우에서 실행될 작업들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업은 GitHub-hosted runner의 'ubuntu-latest' 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    services:
      mysql_db:
        image: mysql:8.0
        ports:
          - 3306:3306 # HOST:CONTAINER
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: secondhand
          MYSQL_USER: test
          MYSQL_PASSWORD: test

    # 작업에서 실행될 순차적인 단계를 정의합니다.
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Java 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'

      # Gradle wrapper와 의존성들을 캐싱합니다.
      - name: Gradle 의존성들을 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 비밀 키 적용
        run: |
          echo "${{ secrets.CLOUD }}" | base64 --decode > second-hand-b/src/main/resources/application-cloud.yml
          echo "${{ secrets.OAUTH2 }}" | base64 --decode > second-hand-b/src/main/resources/application-oauth2.yml

      - name: 프로젝트 빌드
        run: |
          cd second-hand-b
          chmod +x gradlew
          ./gradlew build

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            second-hand-b/build/test-results/**/*.xml
